// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Libvirt
{
    public partial class Network : Pulumi.CustomResource
    {
        [Output("addresses")]
        public Output<ImmutableArray<string>> Addresses { get; private set; } = null!;

        [Output("autostart")]
        public Output<bool?> Autostart { get; private set; } = null!;

        [Output("bridge")]
        public Output<string> Bridge { get; private set; } = null!;

        [Output("dhcp")]
        public Output<Outputs.NetworkDhcp?> Dhcp { get; private set; } = null!;

        [Output("dns")]
        public Output<Outputs.NetworkDns?> Dns { get; private set; } = null!;

        [Output("domain")]
        public Output<string?> Domain { get; private set; } = null!;

        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        [Output("mtu")]
        public Output<int?> Mtu { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("routes")]
        public Output<ImmutableArray<Outputs.NetworkRoute>> Routes { get; private set; } = null!;

        [Output("xml")]
        public Output<Outputs.NetworkXml?> Xml { get; private set; } = null!;


        /// <summary>
        /// Create a Network resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Network(string name, NetworkArgs? args = null, CustomResourceOptions? options = null)
            : base("libvirt:index/network:Network", name, args ?? new NetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Network(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
            : base("libvirt:index/network:Network", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Network resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Network Get(string name, Input<string> id, NetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new Network(name, id, state, options);
        }
    }

    public sealed class NetworkArgs : Pulumi.ResourceArgs
    {
        [Input("addresses")]
        private InputList<string>? _addresses;
        public InputList<string> Addresses
        {
            get => _addresses ?? (_addresses = new InputList<string>());
            set => _addresses = value;
        }

        [Input("autostart")]
        public Input<bool>? Autostart { get; set; }

        [Input("bridge")]
        public Input<string>? Bridge { get; set; }

        [Input("dhcp")]
        public Input<Inputs.NetworkDhcpArgs>? Dhcp { get; set; }

        [Input("dns")]
        public Input<Inputs.NetworkDnsArgs>? Dns { get; set; }

        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("mode")]
        public Input<string>? Mode { get; set; }

        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("routes")]
        private InputList<Inputs.NetworkRouteArgs>? _routes;
        public InputList<Inputs.NetworkRouteArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.NetworkRouteArgs>());
            set => _routes = value;
        }

        [Input("xml")]
        public Input<Inputs.NetworkXmlArgs>? Xml { get; set; }

        public NetworkArgs()
        {
        }
    }

    public sealed class NetworkState : Pulumi.ResourceArgs
    {
        [Input("addresses")]
        private InputList<string>? _addresses;
        public InputList<string> Addresses
        {
            get => _addresses ?? (_addresses = new InputList<string>());
            set => _addresses = value;
        }

        [Input("autostart")]
        public Input<bool>? Autostart { get; set; }

        [Input("bridge")]
        public Input<string>? Bridge { get; set; }

        [Input("dhcp")]
        public Input<Inputs.NetworkDhcpGetArgs>? Dhcp { get; set; }

        [Input("dns")]
        public Input<Inputs.NetworkDnsGetArgs>? Dns { get; set; }

        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("mode")]
        public Input<string>? Mode { get; set; }

        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("routes")]
        private InputList<Inputs.NetworkRouteGetArgs>? _routes;
        public InputList<Inputs.NetworkRouteGetArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.NetworkRouteGetArgs>());
            set => _routes = value;
        }

        [Input("xml")]
        public Input<Inputs.NetworkXmlGetArgs>? Xml { get; set; }

        public NetworkState()
        {
        }
    }
}
