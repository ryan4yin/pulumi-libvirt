// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package libvirt

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Pool struct {
	pulumi.CustomResourceState

	Allocation pulumi.IntOutput       `pulumi:"allocation"`
	Available  pulumi.StringOutput    `pulumi:"available"`
	Capacity   pulumi.IntOutput       `pulumi:"capacity"`
	Name       pulumi.StringOutput    `pulumi:"name"`
	Path       pulumi.StringPtrOutput `pulumi:"path"`
	Type       pulumi.StringOutput    `pulumi:"type"`
	Xml        PoolXmlPtrOutput       `pulumi:"xml"`
}

// NewPool registers a new resource with the given unique name, arguments, and options.
func NewPool(ctx *pulumi.Context,
	name string, args *PoolArgs, opts ...pulumi.ResourceOption) (*Pool, error) {
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil {
		args = &PoolArgs{}
	}
	var resource Pool
	err := ctx.RegisterResource("libvirt:index/pool:Pool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPool gets an existing Pool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PoolState, opts ...pulumi.ResourceOption) (*Pool, error) {
	var resource Pool
	err := ctx.ReadResource("libvirt:index/pool:Pool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pool resources.
type poolState struct {
	Allocation *int     `pulumi:"allocation"`
	Available  *string  `pulumi:"available"`
	Capacity   *int     `pulumi:"capacity"`
	Name       *string  `pulumi:"name"`
	Path       *string  `pulumi:"path"`
	Type       *string  `pulumi:"type"`
	Xml        *PoolXml `pulumi:"xml"`
}

type PoolState struct {
	Allocation pulumi.IntPtrInput
	Available  pulumi.StringPtrInput
	Capacity   pulumi.IntPtrInput
	Name       pulumi.StringPtrInput
	Path       pulumi.StringPtrInput
	Type       pulumi.StringPtrInput
	Xml        PoolXmlPtrInput
}

func (PoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*poolState)(nil)).Elem()
}

type poolArgs struct {
	Allocation *int     `pulumi:"allocation"`
	Available  *string  `pulumi:"available"`
	Capacity   *int     `pulumi:"capacity"`
	Name       *string  `pulumi:"name"`
	Path       *string  `pulumi:"path"`
	Type       string   `pulumi:"type"`
	Xml        *PoolXml `pulumi:"xml"`
}

// The set of arguments for constructing a Pool resource.
type PoolArgs struct {
	Allocation pulumi.IntPtrInput
	Available  pulumi.StringPtrInput
	Capacity   pulumi.IntPtrInput
	Name       pulumi.StringPtrInput
	Path       pulumi.StringPtrInput
	Type       pulumi.StringInput
	Xml        PoolXmlPtrInput
}

func (PoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*poolArgs)(nil)).Elem()
}
