// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package libvirt

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Network struct {
	pulumi.CustomResourceState

	Addresses pulumi.StringArrayOutput `pulumi:"addresses"`
	Autostart pulumi.BoolPtrOutput     `pulumi:"autostart"`
	Bridge    pulumi.StringOutput      `pulumi:"bridge"`
	Dhcp      NetworkDhcpPtrOutput     `pulumi:"dhcp"`
	Dns       NetworkDnsPtrOutput      `pulumi:"dns"`
	Domain    pulumi.StringPtrOutput   `pulumi:"domain"`
	Mode      pulumi.StringPtrOutput   `pulumi:"mode"`
	Mtu       pulumi.IntPtrOutput      `pulumi:"mtu"`
	Name      pulumi.StringOutput      `pulumi:"name"`
	Routes    NetworkRouteArrayOutput  `pulumi:"routes"`
	Xml       NetworkXmlPtrOutput      `pulumi:"xml"`
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOption) (*Network, error) {
	if args == nil {
		args = &NetworkArgs{}
	}
	var resource Network
	err := ctx.RegisterResource("libvirt:index/network:Network", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkState, opts ...pulumi.ResourceOption) (*Network, error) {
	var resource Network
	err := ctx.ReadResource("libvirt:index/network:Network", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Network resources.
type networkState struct {
	Addresses []string       `pulumi:"addresses"`
	Autostart *bool          `pulumi:"autostart"`
	Bridge    *string        `pulumi:"bridge"`
	Dhcp      *NetworkDhcp   `pulumi:"dhcp"`
	Dns       *NetworkDns    `pulumi:"dns"`
	Domain    *string        `pulumi:"domain"`
	Mode      *string        `pulumi:"mode"`
	Mtu       *int           `pulumi:"mtu"`
	Name      *string        `pulumi:"name"`
	Routes    []NetworkRoute `pulumi:"routes"`
	Xml       *NetworkXml    `pulumi:"xml"`
}

type NetworkState struct {
	Addresses pulumi.StringArrayInput
	Autostart pulumi.BoolPtrInput
	Bridge    pulumi.StringPtrInput
	Dhcp      NetworkDhcpPtrInput
	Dns       NetworkDnsPtrInput
	Domain    pulumi.StringPtrInput
	Mode      pulumi.StringPtrInput
	Mtu       pulumi.IntPtrInput
	Name      pulumi.StringPtrInput
	Routes    NetworkRouteArrayInput
	Xml       NetworkXmlPtrInput
}

func (NetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkState)(nil)).Elem()
}

type networkArgs struct {
	Addresses []string       `pulumi:"addresses"`
	Autostart *bool          `pulumi:"autostart"`
	Bridge    *string        `pulumi:"bridge"`
	Dhcp      *NetworkDhcp   `pulumi:"dhcp"`
	Dns       *NetworkDns    `pulumi:"dns"`
	Domain    *string        `pulumi:"domain"`
	Mode      *string        `pulumi:"mode"`
	Mtu       *int           `pulumi:"mtu"`
	Name      *string        `pulumi:"name"`
	Routes    []NetworkRoute `pulumi:"routes"`
	Xml       *NetworkXml    `pulumi:"xml"`
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	Addresses pulumi.StringArrayInput
	Autostart pulumi.BoolPtrInput
	Bridge    pulumi.StringPtrInput
	Dhcp      NetworkDhcpPtrInput
	Dns       NetworkDnsPtrInput
	Domain    pulumi.StringPtrInput
	Mode      pulumi.StringPtrInput
	Mtu       pulumi.IntPtrInput
	Name      pulumi.StringPtrInput
	Routes    NetworkRouteArrayInput
	Xml       NetworkXmlPtrInput
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkArgs)(nil)).Elem()
}
