// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'libvirt:index/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    public readonly baseVolumeId!: pulumi.Output<string | undefined>;
    public readonly baseVolumeName!: pulumi.Output<string | undefined>;
    public readonly baseVolumePool!: pulumi.Output<string | undefined>;
    public readonly format!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly pool!: pulumi.Output<string | undefined>;
    public readonly size!: pulumi.Output<number>;
    public readonly source!: pulumi.Output<string | undefined>;
    public readonly xml!: pulumi.Output<outputs.VolumeXml | undefined>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as VolumeState | undefined;
            inputs["baseVolumeId"] = state ? state.baseVolumeId : undefined;
            inputs["baseVolumeName"] = state ? state.baseVolumeName : undefined;
            inputs["baseVolumePool"] = state ? state.baseVolumePool : undefined;
            inputs["format"] = state ? state.format : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["pool"] = state ? state.pool : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["source"] = state ? state.source : undefined;
            inputs["xml"] = state ? state.xml : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            inputs["baseVolumeId"] = args ? args.baseVolumeId : undefined;
            inputs["baseVolumeName"] = args ? args.baseVolumeName : undefined;
            inputs["baseVolumePool"] = args ? args.baseVolumePool : undefined;
            inputs["format"] = args ? args.format : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["pool"] = args ? args.pool : undefined;
            inputs["size"] = args ? args.size : undefined;
            inputs["source"] = args ? args.source : undefined;
            inputs["xml"] = args ? args.xml : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Volume.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    readonly baseVolumeId?: pulumi.Input<string>;
    readonly baseVolumeName?: pulumi.Input<string>;
    readonly baseVolumePool?: pulumi.Input<string>;
    readonly format?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly pool?: pulumi.Input<string>;
    readonly size?: pulumi.Input<number>;
    readonly source?: pulumi.Input<string>;
    readonly xml?: pulumi.Input<inputs.VolumeXml>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    readonly baseVolumeId?: pulumi.Input<string>;
    readonly baseVolumeName?: pulumi.Input<string>;
    readonly baseVolumePool?: pulumi.Input<string>;
    readonly format?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly pool?: pulumi.Input<string>;
    readonly size?: pulumi.Input<number>;
    readonly source?: pulumi.Input<string>;
    readonly xml?: pulumi.Input<inputs.VolumeXml>;
}
