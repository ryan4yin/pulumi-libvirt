// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DomainBootDevice {
    devs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DomainConsole {
    sourceHost?: pulumi.Input<string>;
    sourcePath?: pulumi.Input<string>;
    sourceService?: pulumi.Input<string>;
    targetPort: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DomainCpu {
    mode: pulumi.Input<string>;
}

export interface DomainDisk {
    blockDevice?: pulumi.Input<string>;
    file?: pulumi.Input<string>;
    scsi?: pulumi.Input<boolean>;
    url?: pulumi.Input<string>;
    volumeId?: pulumi.Input<string>;
    wwn?: pulumi.Input<string>;
}

export interface DomainFilesystem {
    accessmode?: pulumi.Input<string>;
    readonly?: pulumi.Input<boolean>;
    source: pulumi.Input<string>;
    target: pulumi.Input<string>;
}

export interface DomainGraphics {
    autoport?: pulumi.Input<boolean>;
    listenAddress?: pulumi.Input<string>;
    listenType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface DomainNetworkInterface {
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    bridge?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    macvtap?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    networkName?: pulumi.Input<string>;
    passthrough?: pulumi.Input<string>;
    vepa?: pulumi.Input<string>;
    waitForLease?: pulumi.Input<boolean>;
}

export interface DomainNvram {
    file: pulumi.Input<string>;
    template?: pulumi.Input<string>;
}

export interface DomainVideo {
    type?: pulumi.Input<string>;
}

export interface DomainXml {
    xslt?: pulumi.Input<string>;
}

export interface NetworkDhcp {
    enabled?: pulumi.Input<boolean>;
}

export interface NetworkDns {
    enabled?: pulumi.Input<boolean>;
    forwarders?: pulumi.Input<pulumi.Input<inputs.NetworkDnsForwarder>[]>;
    hosts?: pulumi.Input<pulumi.Input<inputs.NetworkDnsHost>[]>;
    localOnly?: pulumi.Input<boolean>;
    srvs?: pulumi.Input<pulumi.Input<inputs.NetworkDnsSrv>[]>;
}

export interface NetworkDnsForwarder {
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
}

export interface NetworkDnsHost {
    hostname?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
}

export interface NetworkDnsSrv {
    domain?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    weight?: pulumi.Input<string>;
}

export interface NetworkRoute {
    cidr: pulumi.Input<string>;
    gateway: pulumi.Input<string>;
}

export interface NetworkXml {
    xslt?: pulumi.Input<string>;
}

export interface PoolXml {
    xslt?: pulumi.Input<string>;
}

export interface VolumeXml {
    xslt?: pulumi.Input<string>;
}
