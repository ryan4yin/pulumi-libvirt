// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Pool extends pulumi.CustomResource {
    /**
     * Get an existing Pool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PoolState, opts?: pulumi.CustomResourceOptions): Pool {
        return new Pool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'libvirt:index/pool:Pool';

    /**
     * Returns true if the given object is an instance of Pool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pool.__pulumiType;
    }

    public readonly allocation!: pulumi.Output<number>;
    public readonly available!: pulumi.Output<string>;
    public readonly capacity!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly path!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly xml!: pulumi.Output<outputs.PoolXml | undefined>;

    /**
     * Create a Pool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PoolArgs | PoolState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as PoolState | undefined;
            inputs["allocation"] = state ? state.allocation : undefined;
            inputs["available"] = state ? state.available : undefined;
            inputs["capacity"] = state ? state.capacity : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["path"] = state ? state.path : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["xml"] = state ? state.xml : undefined;
        } else {
            const args = argsOrState as PoolArgs | undefined;
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["allocation"] = args ? args.allocation : undefined;
            inputs["available"] = args ? args.available : undefined;
            inputs["capacity"] = args ? args.capacity : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["path"] = args ? args.path : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["xml"] = args ? args.xml : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Pool.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Pool resources.
 */
export interface PoolState {
    readonly allocation?: pulumi.Input<number>;
    readonly available?: pulumi.Input<string>;
    readonly capacity?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly path?: pulumi.Input<string>;
    readonly type?: pulumi.Input<string>;
    readonly xml?: pulumi.Input<inputs.PoolXml>;
}

/**
 * The set of arguments for constructing a Pool resource.
 */
export interface PoolArgs {
    readonly allocation?: pulumi.Input<number>;
    readonly available?: pulumi.Input<string>;
    readonly capacity?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly path?: pulumi.Input<string>;
    readonly type: pulumi.Input<string>;
    readonly xml?: pulumi.Input<inputs.PoolXml>;
}
